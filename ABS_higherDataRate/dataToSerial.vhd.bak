-- COPYRIGHT 2012: Jan Burchard, Lehrstuhl fuer Rechnerarchitektur, Universitaet Freiburg
-- This file is only for the hardware labs "grand challenge" 2012!
-- It must not be uploaded, distributet or otherwise made available to any third party!

-- dataToSerial: transmits 3x8 bits via serial (9600 bauds)
-- usage: connect clock_50 to 50 mhz clock, and any data you want to transmit to a free data port
-- receive the data via "serialReceiver" on the arduino.

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity dataToSerial is port(
	clk_50 : in std_logic;
	
	data1 : in std_logic_vector(7 downto 0);
	data2 : in std_logic_vector(7 downto 0);
	data_3 : in std_logic_vector(7 downto 0);
	data_4 : in std_logic_vector(7 downto 0);
	data_5 : in std_logic_vector(7 downto 0);
   data_6 : in std_logic_vector(7 downto 0);
	data_7 : in std_logic_vector(7 downto 0);
   data_8 : in std_logic_vector(7 downto 0);
   data_9 : in std_logic_vector(7 downto 0);	
   data_1_0 : in std_logic_vector(7 downto 0);	
   data_1_1 : in std_logic_vector(7 downto 0);	
   data_1_2 : in std_logic_vector(7 downto 0);	
   data_1_3 : in std_logic_vector(7 downto 0);	
   data_1_4 : in std_logic_vector(7 downto 0);
   data_1_5 : in std_logic_vector(7 downto 0);		
   data_1_6 : in std_logic_vector(7 downto 0);
   data_1_7 : in std_logic_vector(7 downto 0);		
   data_1_8 : in std_logic_vector(7 downto 0);		
   data_1_9 : in std_logic_vector(7 downto 0);		
   data_2_0 : in std_logic_vector(7 downto 0);		
	data_2_1 : in std_logic_vector(7 downto 0);
	data_2_2 : in std_logic_vector(7 downto 0);
   data_2_3 : in std_logic_vector(7 downto 0);
	data_2_4 : in std_logic_vector(7 downto 0);
	
	serial : out std_logic
);
end dataToSerial;


architecture behavior of dataToSerial is
	-- create the serial clk (9600 baud)
	signal serialClk : std_logic := '1';

	signal serialClkTimer : natural := 1;
	constant serialCLkTime : natural := 2604;
	
	
	-- internal state machine (which signal is sent):
	signal state : natural := 1;
	-- state:
	-- 0 : 'x'
	-- 1 : data1
	-- 2 : 'y'
	-- 3 : data2
	-- 4 : 'p'
	-- 5 : data3
	-- 6 : 'q'
	-- 7 : data4
	-- 8 : 'r'
	-- 9 : data5
	-- 10 : 's'
	-- 11 : data6
	-- 12 : 't'
	-- 13 : data7
	
	
	constant dataA : std_logic_vector(7 downto 0) := "01100001";
	constant dataB : std_logic_vector(7 downto 0) := "01100010";
	constant dataC : std_logic_vector(7 downto 0) := "01100011";
	constant dataD : std_logic_vector(7 downto 0) := "01100100";
	constant dataE : std_logic_vector(7 downto 0) := "01100101";
	constant dataF : std_logic_vector(7 downto 0) := "01100110";
	constant dataG : std_logic_vector(7 downto 0) := "01100111";
	constant dataH : std_logic_vector(7 downto 0) := "01101000";
	constant dataI : std_logic_vector(7 downto 0) := "01101001";
	constant dataJ : std_logic_vector(7 downto 0) := "01101010";
	constant dataK : std_logic_vector(7 downto 0) := "01101011";
	constant dataL : std_logic_vector(7 downto 0) := "01101100";
	constant dataM : std_logic_vector(7 downto 0) := "01101101";
	constant dataN : std_logic_vector(7 downto 0) := "01101110";
	constant dataO : std_logic_vector(7 downto 0) := "01101111";
	constant dataP : std_logic_vector(7 downto 0) := "01110000";
	constant dataQ : std_logic_vector(7 downto 0) := "01110001";
   constant dataR : std_logic_vector(7 downto 0) := "01110010";
	constant dataS : std_logic_vector(7 downto 0) := "01110011";
	constant dataT : std_logic_vector(7 downto 0) := "01110100";
	constant dataU : std_logic_vector(7 downto 0) := "01110101";
   constant dataV : std_logic_vector(7 downto 0) := "01110110";	
	constant dataW : std_logic_vector(7 downto 0) := "01110111";
   constant dataX : std_logic_vector(7 downto 0) := "01111000";	

	
	-- serial state machine:
	signal serialState : natural := 0;
	
	
begin
	process(clk_50)
	begin
		if rising_edge(clk_50) then
			serialClkTimer <= serialClkTimer + 1;
			
			if serialClkTimer = serialCLkTime then
				serialClk <= not serialClk;
				serialClkTimer <= 1;
			end if;
		end if;
	end process;

	-- create the serial signal
	process(serialClk)
	begin
		-- change the serial state
		if rising_edge(serialClk) then
			serialState <= serialState + 1;
			
			if serialState = 11 then
				if state = 47 then
					state <= 0;
				else
					state <= state + 1;
				end if;
				
				serialState <= 0;
			end if;
		end if;
	
		if falling_edge(serialClk) then
			-- start bit
			if serialState = 0 then
				serial <= '0';
			
			-- data
			elsif serialState > 0 and serialState < 9 then
				if state = 0 then
					serial <= dataA(serialState - 1);
				elsif state = 1 then
					serial <= data1(serialState - 1);
				elsif state = 2 then
					serial <= dataB(serialState - 1);
				elsif state = 3 then
					serial <= data2(serialState - 1);
				elsif state = 4 then
					serial <= dataC(serialState - 1);
				elsif state = 5 then
					serial <= data_3(serialState - 1);
			   elsif state = 6 then
				   serial <= dataD(serialState - 1);
				elsif state = 7 then
				   serial <= data_4(serialState - 1);
				elsif state = 8 then
				   serial <= dataE(serialState - 1);
				elsif state = 9 then
				   serial <= data_5(serialState - 1);
				elsif state = 10 then
				   serial <= dataF(serialState - 1);
				elsif state = 11 then
				   serial <= data_6(serialState - 1);
				elsif state = 12 then
				   serial <= dataG(serialState - 1);
				elsif state = 13 then
				   serial <= data_7(serialState - 1);	
				elsif state = 14 then
				   serial <= dataH(serialState - 1);
				elsif state = 15 then
				   serial <= data_8(serialState - 1);
            elsif state = 16 then
				   serial <= dataI(serialState - 1);
				elsif state = 17 then
				   serial <= data_9(serialState - 1);					
				elsif state = 18 then
				   serial <= dataJ(serialState - 1);
				elsif state = 19 then
				   serial <= data_1_0(serialState - 1);
				elsif state = 20 then
				   serial <= dataK(serialState - 1);
				elsif state = 21 then
				   serial <= data_1_1(serialState - 1);
				elsif state = 22 then
				   serial <= dataL(serialState - 1);
				elsif state = 23 then
				   serial <= data_1_2(serialState - 1);
				elsif state = 24 then
				   serial <= dataM(serialState - 1);
				elsif state = 25 then
				   serial <= data_1_3(serialState - 1);
				elsif state = 26 then
				   serial <= dataN(serialState - 1);
				elsif state = 27 then
				   serial <= data_1_4(serialState - 1);
				elsif state = 28 then
				   serial <= dataO(serialState - 1);
				elsif state = 29 then
				   serial <= data_1_5(serialState - 1);
				elsif state = 30 then
				   serial <= dataP(serialState - 1);
				elsif state = 31 then
				   serial <= data_1_6(serialState - 1);
				elsif state = 32 then
				   serial <= dataQ(serialState - 1);
				elsif state = 33 then
				   serial <= data_1_7(serialState - 1);
				elsif state = 34 then
				   serial <= dataR(serialState - 1);
				elsif state = 35 then
				   serial <= data_1_8(serialState - 1);					
				elsif state = 36 then
				   serial <= dataS(serialState - 1);
				elsif state = 37 then
				   serial <= data_1_9(serialState - 1);					
				elsif state = 38 then
				   serial <= dataT(serialState - 1);
				elsif state = 39 then
				   serial <= data_2_0(serialState - 1);
				elsif state = 40 then
				   serial <= dataU(serialState - 1);
				elsif state = 41 then
				   serial <= data_2_1(serialState - 1);						
				elsif state = 42 then
				   serial <= dataV(serialState - 1);
				elsif state = 43 then
				   serial <= data_2_2(serialState - 1);						
				elsif state = 44 then
				   serial <= dataW(serialState - 1);
				elsif state = 45 then
				   serial <= data_2_3(serialState - 1);
				elsif state = 46 then
				   serial <= dataX(serialState - 1);
				elsif state = 47 then
				   serial <= data_2_4(serialState - 1);					
				end if;
			
			-- stop bit
			elsif serialState > 8 then
				serial <= '1';
			end if;
		
		end if;
		
	end process;
	
end behavior;
